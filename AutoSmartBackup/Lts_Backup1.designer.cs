#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AutoSmartBackup
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AutoBackup")]
	public partial class Lts_BackupDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBkp_Tb_DataBase(Bkp_Tb_DataBase instance);
    partial void UpdateBkp_Tb_DataBase(Bkp_Tb_DataBase instance);
    partial void DeleteBkp_Tb_DataBase(Bkp_Tb_DataBase instance);
    partial void InsertBkp_Tb_ServerDataBase(Bkp_Tb_ServerDataBase instance);
    partial void UpdateBkp_Tb_ServerDataBase(Bkp_Tb_ServerDataBase instance);
    partial void DeleteBkp_Tb_ServerDataBase(Bkp_Tb_ServerDataBase instance);
    partial void InsertBkp_Tb_Server(Bkp_Tb_Server instance);
    partial void UpdateBkp_Tb_Server(Bkp_Tb_Server instance);
    partial void DeleteBkp_Tb_Server(Bkp_Tb_Server instance);
    #endregion
		
		public Lts_BackupDataContext() : 
				base(global::AutoSmartBackup.Properties.Settings.Default.AutoBackupConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public Lts_BackupDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Lts_BackupDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Lts_BackupDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Lts_BackupDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Bkp_Tb_DataBase> Bkp_Tb_DataBases
		{
			get
			{
				return this.GetTable<Bkp_Tb_DataBase>();
			}
		}
		
		public System.Data.Linq.Table<Bkp_Tb_ServerDataBase> Bkp_Tb_ServerDataBases
		{
			get
			{
				return this.GetTable<Bkp_Tb_ServerDataBase>();
			}
		}
		
		public System.Data.Linq.Table<Bkp_Tb_Server> Bkp_Tb_Servers
		{
			get
			{
				return this.GetTable<Bkp_Tb_Server>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bkp_Tb_DataBase")]
	public partial class Bkp_Tb_DataBase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _xDataBaseId_pk;
		
		private string _xDataBaseName;
		
		private bool _xDataBaseIsDeleted_;
		
		private EntitySet<Bkp_Tb_ServerDataBase> _Bkp_Tb_ServerDataBases;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnxDataBaseId_pkChanging(int value);
    partial void OnxDataBaseId_pkChanged();
    partial void OnxDataBaseNameChanging(string value);
    partial void OnxDataBaseNameChanged();
    partial void OnxDataBaseIsDeleted_Changing(bool value);
    partial void OnxDataBaseIsDeleted_Changed();
    #endregion
		
		public Bkp_Tb_DataBase()
		{
			this._Bkp_Tb_ServerDataBases = new EntitySet<Bkp_Tb_ServerDataBase>(new Action<Bkp_Tb_ServerDataBase>(this.attach_Bkp_Tb_ServerDataBases), new Action<Bkp_Tb_ServerDataBase>(this.detach_Bkp_Tb_ServerDataBases));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xDataBaseId_pk", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int xDataBaseId_pk
		{
			get
			{
				return this._xDataBaseId_pk;
			}
			set
			{
				if ((this._xDataBaseId_pk != value))
				{
					this.OnxDataBaseId_pkChanging(value);
					this.SendPropertyChanging();
					this._xDataBaseId_pk = value;
					this.SendPropertyChanged("xDataBaseId_pk");
					this.OnxDataBaseId_pkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xDataBaseName", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string xDataBaseName
		{
			get
			{
				return this._xDataBaseName;
			}
			set
			{
				if ((this._xDataBaseName != value))
				{
					this.OnxDataBaseNameChanging(value);
					this.SendPropertyChanging();
					this._xDataBaseName = value;
					this.SendPropertyChanged("xDataBaseName");
					this.OnxDataBaseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[xDataBaseIsDeleted?]", Storage="_xDataBaseIsDeleted_", DbType="Bit NOT NULL")]
		public bool xDataBaseIsDeleted_
		{
			get
			{
				return this._xDataBaseIsDeleted_;
			}
			set
			{
				if ((this._xDataBaseIsDeleted_ != value))
				{
					this.OnxDataBaseIsDeleted_Changing(value);
					this.SendPropertyChanging();
					this._xDataBaseIsDeleted_ = value;
					this.SendPropertyChanged("xDataBaseIsDeleted_");
					this.OnxDataBaseIsDeleted_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bkp_Tb_DataBase_Bkp_Tb_ServerDataBase", Storage="_Bkp_Tb_ServerDataBases", ThisKey="xDataBaseId_pk", OtherKey="xDataBaseId_fk")]
		public EntitySet<Bkp_Tb_ServerDataBase> Bkp_Tb_ServerDataBases
		{
			get
			{
				return this._Bkp_Tb_ServerDataBases;
			}
			set
			{
				this._Bkp_Tb_ServerDataBases.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bkp_Tb_ServerDataBases(Bkp_Tb_ServerDataBase entity)
		{
			this.SendPropertyChanging();
			entity.Bkp_Tb_DataBase = this;
		}
		
		private void detach_Bkp_Tb_ServerDataBases(Bkp_Tb_ServerDataBase entity)
		{
			this.SendPropertyChanging();
			entity.Bkp_Tb_DataBase = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bkp_Tb_ServerDataBase")]
	public partial class Bkp_Tb_ServerDataBase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _xServerId_fk;
		
		private int _xDataBaseId_fk;
		
		private bool _xServerDataBaseIsDeleted_;
		
		private EntityRef<Bkp_Tb_DataBase> _Bkp_Tb_DataBase;
		
		private EntityRef<Bkp_Tb_Server> _Bkp_Tb_Server;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnxServerId_fkChanging(int value);
    partial void OnxServerId_fkChanged();
    partial void OnxDataBaseId_fkChanging(int value);
    partial void OnxDataBaseId_fkChanged();
    partial void OnxServerDataBaseIsDeleted_Changing(bool value);
    partial void OnxServerDataBaseIsDeleted_Changed();
    #endregion
		
		public Bkp_Tb_ServerDataBase()
		{
			this._Bkp_Tb_DataBase = default(EntityRef<Bkp_Tb_DataBase>);
			this._Bkp_Tb_Server = default(EntityRef<Bkp_Tb_Server>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xServerId_fk", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int xServerId_fk
		{
			get
			{
				return this._xServerId_fk;
			}
			set
			{
				if ((this._xServerId_fk != value))
				{
					if (this._Bkp_Tb_Server.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnxServerId_fkChanging(value);
					this.SendPropertyChanging();
					this._xServerId_fk = value;
					this.SendPropertyChanged("xServerId_fk");
					this.OnxServerId_fkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xDataBaseId_fk", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int xDataBaseId_fk
		{
			get
			{
				return this._xDataBaseId_fk;
			}
			set
			{
				if ((this._xDataBaseId_fk != value))
				{
					if (this._Bkp_Tb_DataBase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnxDataBaseId_fkChanging(value);
					this.SendPropertyChanging();
					this._xDataBaseId_fk = value;
					this.SendPropertyChanged("xDataBaseId_fk");
					this.OnxDataBaseId_fkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[xServerDataBaseIsDeleted?]", Storage="_xServerDataBaseIsDeleted_", DbType="Bit NOT NULL")]
		public bool xServerDataBaseIsDeleted_
		{
			get
			{
				return this._xServerDataBaseIsDeleted_;
			}
			set
			{
				if ((this._xServerDataBaseIsDeleted_ != value))
				{
					this.OnxServerDataBaseIsDeleted_Changing(value);
					this.SendPropertyChanging();
					this._xServerDataBaseIsDeleted_ = value;
					this.SendPropertyChanged("xServerDataBaseIsDeleted_");
					this.OnxServerDataBaseIsDeleted_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bkp_Tb_DataBase_Bkp_Tb_ServerDataBase", Storage="_Bkp_Tb_DataBase", ThisKey="xDataBaseId_fk", OtherKey="xDataBaseId_pk", IsForeignKey=true)]
		public Bkp_Tb_DataBase Bkp_Tb_DataBase
		{
			get
			{
				return this._Bkp_Tb_DataBase.Entity;
			}
			set
			{
				Bkp_Tb_DataBase previousValue = this._Bkp_Tb_DataBase.Entity;
				if (((previousValue != value) 
							|| (this._Bkp_Tb_DataBase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bkp_Tb_DataBase.Entity = null;
						previousValue.Bkp_Tb_ServerDataBases.Remove(this);
					}
					this._Bkp_Tb_DataBase.Entity = value;
					if ((value != null))
					{
						value.Bkp_Tb_ServerDataBases.Add(this);
						this._xDataBaseId_fk = value.xDataBaseId_pk;
					}
					else
					{
						this._xDataBaseId_fk = default(int);
					}
					this.SendPropertyChanged("Bkp_Tb_DataBase");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bkp_Tb_Server_Bkp_Tb_ServerDataBase", Storage="_Bkp_Tb_Server", ThisKey="xServerId_fk", OtherKey="xServerId_pk", IsForeignKey=true)]
		public Bkp_Tb_Server Bkp_Tb_Server
		{
			get
			{
				return this._Bkp_Tb_Server.Entity;
			}
			set
			{
				Bkp_Tb_Server previousValue = this._Bkp_Tb_Server.Entity;
				if (((previousValue != value) 
							|| (this._Bkp_Tb_Server.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bkp_Tb_Server.Entity = null;
						previousValue.Bkp_Tb_ServerDataBases.Remove(this);
					}
					this._Bkp_Tb_Server.Entity = value;
					if ((value != null))
					{
						value.Bkp_Tb_ServerDataBases.Add(this);
						this._xServerId_fk = value.xServerId_pk;
					}
					else
					{
						this._xServerId_fk = default(int);
					}
					this.SendPropertyChanged("Bkp_Tb_Server");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bkp_Tb_Server")]
	public partial class Bkp_Tb_Server : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _xServerId_pk;
		
		private string _xServerIP;
		
		private string _xServerDomainName;
		
		private string _xServerAdminName;
		
		private string _xServerAdminPassword;
		
		private string _xServerSQLAdminName;
		
		private string _xServerSQLAdminPassword;
		
		private string _xServerSQLInstance;
		
		private string _xServerDriveToBackup;
		
		private bool _xServerIsDeleted_;
		
		private EntitySet<Bkp_Tb_ServerDataBase> _Bkp_Tb_ServerDataBases;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnxServerId_pkChanging(int value);
    partial void OnxServerId_pkChanged();
    partial void OnxServerIPChanging(string value);
    partial void OnxServerIPChanged();
    partial void OnxServerDomainNameChanging(string value);
    partial void OnxServerDomainNameChanged();
    partial void OnxServerAdminNameChanging(string value);
    partial void OnxServerAdminNameChanged();
    partial void OnxServerAdminPasswordChanging(string value);
    partial void OnxServerAdminPasswordChanged();
    partial void OnxServerSQLAdminNameChanging(string value);
    partial void OnxServerSQLAdminNameChanged();
    partial void OnxServerSQLAdminPasswordChanging(string value);
    partial void OnxServerSQLAdminPasswordChanged();
    partial void OnxServerSQLInstanceChanging(string value);
    partial void OnxServerSQLInstanceChanged();
    partial void OnxServerDriveToBackupChanging(string value);
    partial void OnxServerDriveToBackupChanged();
    partial void OnxServerIsDeleted_Changing(bool value);
    partial void OnxServerIsDeleted_Changed();
    #endregion
		
		public Bkp_Tb_Server()
		{
			this._Bkp_Tb_ServerDataBases = new EntitySet<Bkp_Tb_ServerDataBase>(new Action<Bkp_Tb_ServerDataBase>(this.attach_Bkp_Tb_ServerDataBases), new Action<Bkp_Tb_ServerDataBase>(this.detach_Bkp_Tb_ServerDataBases));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xServerId_pk", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int xServerId_pk
		{
			get
			{
				return this._xServerId_pk;
			}
			set
			{
				if ((this._xServerId_pk != value))
				{
					this.OnxServerId_pkChanging(value);
					this.SendPropertyChanging();
					this._xServerId_pk = value;
					this.SendPropertyChanged("xServerId_pk");
					this.OnxServerId_pkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xServerIP", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string xServerIP
		{
			get
			{
				return this._xServerIP;
			}
			set
			{
				if ((this._xServerIP != value))
				{
					this.OnxServerIPChanging(value);
					this.SendPropertyChanging();
					this._xServerIP = value;
					this.SendPropertyChanged("xServerIP");
					this.OnxServerIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xServerDomainName", DbType="NVarChar(35) NOT NULL", CanBeNull=false)]
		public string xServerDomainName
		{
			get
			{
				return this._xServerDomainName;
			}
			set
			{
				if ((this._xServerDomainName != value))
				{
					this.OnxServerDomainNameChanging(value);
					this.SendPropertyChanging();
					this._xServerDomainName = value;
					this.SendPropertyChanged("xServerDomainName");
					this.OnxServerDomainNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xServerAdminName", DbType="NVarChar(35) NOT NULL", CanBeNull=false)]
		public string xServerAdminName
		{
			get
			{
				return this._xServerAdminName;
			}
			set
			{
				if ((this._xServerAdminName != value))
				{
					this.OnxServerAdminNameChanging(value);
					this.SendPropertyChanging();
					this._xServerAdminName = value;
					this.SendPropertyChanged("xServerAdminName");
					this.OnxServerAdminNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xServerAdminPassword", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string xServerAdminPassword
		{
			get
			{
				return this._xServerAdminPassword;
			}
			set
			{
				if ((this._xServerAdminPassword != value))
				{
					this.OnxServerAdminPasswordChanging(value);
					this.SendPropertyChanging();
					this._xServerAdminPassword = value;
					this.SendPropertyChanged("xServerAdminPassword");
					this.OnxServerAdminPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xServerSQLAdminName", DbType="NVarChar(35) NOT NULL", CanBeNull=false)]
		public string xServerSQLAdminName
		{
			get
			{
				return this._xServerSQLAdminName;
			}
			set
			{
				if ((this._xServerSQLAdminName != value))
				{
					this.OnxServerSQLAdminNameChanging(value);
					this.SendPropertyChanging();
					this._xServerSQLAdminName = value;
					this.SendPropertyChanged("xServerSQLAdminName");
					this.OnxServerSQLAdminNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xServerSQLAdminPassword", DbType="NVarChar(35) NOT NULL", CanBeNull=false)]
		public string xServerSQLAdminPassword
		{
			get
			{
				return this._xServerSQLAdminPassword;
			}
			set
			{
				if ((this._xServerSQLAdminPassword != value))
				{
					this.OnxServerSQLAdminPasswordChanging(value);
					this.SendPropertyChanging();
					this._xServerSQLAdminPassword = value;
					this.SendPropertyChanged("xServerSQLAdminPassword");
					this.OnxServerSQLAdminPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xServerSQLInstance", DbType="NVarChar(25)")]
		public string xServerSQLInstance
		{
			get
			{
				return this._xServerSQLInstance;
			}
			set
			{
				if ((this._xServerSQLInstance != value))
				{
					this.OnxServerSQLInstanceChanging(value);
					this.SendPropertyChanging();
					this._xServerSQLInstance = value;
					this.SendPropertyChanged("xServerSQLInstance");
					this.OnxServerSQLInstanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xServerDriveToBackup", DbType="NChar(3) NOT NULL", CanBeNull=false)]
		public string xServerDriveToBackup
		{
			get
			{
				return this._xServerDriveToBackup;
			}
			set
			{
				if ((this._xServerDriveToBackup != value))
				{
					this.OnxServerDriveToBackupChanging(value);
					this.SendPropertyChanging();
					this._xServerDriveToBackup = value;
					this.SendPropertyChanged("xServerDriveToBackup");
					this.OnxServerDriveToBackupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[xServerIsDeleted?]", Storage="_xServerIsDeleted_", DbType="Bit NOT NULL")]
		public bool xServerIsDeleted_
		{
			get
			{
				return this._xServerIsDeleted_;
			}
			set
			{
				if ((this._xServerIsDeleted_ != value))
				{
					this.OnxServerIsDeleted_Changing(value);
					this.SendPropertyChanging();
					this._xServerIsDeleted_ = value;
					this.SendPropertyChanged("xServerIsDeleted_");
					this.OnxServerIsDeleted_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bkp_Tb_Server_Bkp_Tb_ServerDataBase", Storage="_Bkp_Tb_ServerDataBases", ThisKey="xServerId_pk", OtherKey="xServerId_fk")]
		public EntitySet<Bkp_Tb_ServerDataBase> Bkp_Tb_ServerDataBases
		{
			get
			{
				return this._Bkp_Tb_ServerDataBases;
			}
			set
			{
				this._Bkp_Tb_ServerDataBases.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bkp_Tb_ServerDataBases(Bkp_Tb_ServerDataBase entity)
		{
			this.SendPropertyChanging();
			entity.Bkp_Tb_Server = this;
		}
		
		private void detach_Bkp_Tb_ServerDataBases(Bkp_Tb_ServerDataBase entity)
		{
			this.SendPropertyChanging();
			entity.Bkp_Tb_Server = null;
		}
	}
}
#pragma warning restore 1591
